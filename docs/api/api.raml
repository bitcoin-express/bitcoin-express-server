#%RAML 1.0
title: Bitcoin-Express Merchant Gateway
version: v1.0a
baseUri: https://api.gateway.url/{version}
description: |
  This is an initial draft of documentation for Bitcoin-Express Merchant Gateway API.

  Bitcoin-Express Merchant Gateway API provides means to communicate with the Gateway and supports all operations described in
  Bitcoin-Express Payment Integration Guide.

  Most operations require authentication with a valid *authentication token*.
  All (with one exception) operations' responses have a form of **enveloped JSON**:
  ```
  {
      "body": [ <object 1>, <object 2>, ... ],
      "messages": [ <Message 1>, <Message 2>, ...]
      "success": true,
  }
  ```

  where:
  - **body** - an array containing the result of an operation. It may have zero or more elements, depending on the operation performed,
  - **messages** - a list of messages of various types, that can be consumed by the caller. It provides information about encountered errors and operations' results. The format is described in details under corresponding output section,
  - **success** - success indicator. *True* if the operation was successfully resolved or *false* - if not.

  In case where an operation requires authentication and there is no authentication token provided (or it's invalid) an empty 401 response will be returned.

protocols: [HTTPS]
mediaType: application/json
securitySchemes:
  AuthToken:
    type: Pass Through
    description: |
      By default each request - unless stated otherwise - requires authentication header passed together with the request.
    describedBy:
      headers:
        BE-MG-Auth-Token:
          type: string
          description: |
            Authentication token is generated on account's creation. There are two forms of auth tokens available:
            - standard - passed in ***auth_token*** key in the Account creation object,
            - admin - passed in ***admin_auth_token*** key in the Account creation object.

            Use auth_token for general access to the account (such as viewing data). Use admin_auth_token for functions
            that case Coins to be extracted from the account (such as transferring funds to a blockchain).
      responses:
annotationTypes:
  deprecated: nil
  experimental: nil | string
traits: !include traits/traits.raml
resourceTypes:
types:
  TBD:
    type: object
    displayName: Other types - to be implemented
    description: |
      Support of other transaction's types is currently under development.
  JSONResponse: !include schemas/JSONResponse.raml
  Message: !include schemas/primitives/Message.raml
  Transaction__TransactionPayment__Details:
    description: |
      *payment* type transaction representation.

      This representation contains all possible keys that may appear in the object. Actual set of keys depends on the account configuration, transaction payload and its status.
    displayName: Payment
    type: !include schemas/TPaymentTransaction.raml
  Transaction__All__Details:
    description: __skip_node__
    displayName: Transactions
    type: array
    items:
      description: |
        All possible transaction's types.

        Depending on the type, each record will have different keys and values. Each record should contain ***type*** key indicating the type of transaction it is representing.
      type: Transaction__TransactionPayment__Details | TBD
  Transaction__TransactionPayment__CreateRequest:
    displayName: Payment
    type: !include schemas/TPaymentRequest.raml
  Transaction__TransactionTransferBlockchain__CreateRequest:
    displayName: BlockchainTransfer
    type: !include schemas/TransactionTransferBlockchainRequest.raml
  Transaction__TransactionTransferCoinfile__CreateRequest:
    displayName: CoinfileTransfer
    type: !include schemas/TransactionTransferCoinFileRequest.raml
  Transaction__All__CreateRequest:
    description: __skip_node__
    displayName: Transaction Create Requests
    type: array
    examples:
      payment:
        displayName: Payment Request
        value: !include examples/TransactionsPOSTRequest.json
      blockchain:
        displayName: Blockchain Transfer Request
        value: !include examples/TransactionTransferBlockchainRequest.json
      coinfile:
        displayName: Coinfile Transfer Request
        value: !include examples/TransactionTransferCoinFileRequest.json
    items:
      description: |
        All possible create transaction requests.

        Depending on the type, each record will have different keys and values. Each record should contain ***type*** key indicating the type of transaction it is representing.
      type: Transaction__TransactionPayment__CreateRequest | Transaction__TransactionTransferBlockchain__CreateRequest | Transaction__TransactionTransferCoinfile__CreateRequest
  Transaction__TransactionPayment__CreateRequestResponse:
    displayName: Payment
    type: !include schemas/TPaymentTransaction__Create.raml
    description: Representation of the created **Payment** transaction type.
  Transaction__All__CreateRequestResponses:
    description: __skip_node__
    displayName: Transactions
    type: array
    items:
      description: |
        All possible create transaction responses.

        Depending on the type, each record will have different keys and values. Each record should contain ***type*** key indicating the type of transaction it is representing.
      type: Transaction__TransactionPayment__CreateRequestResponse | TBD
  Transaction__TransactionPayment__PaymentRequest:
    displayName: Payment
    type: !include schemas/TPayment.raml
  Transaction__TransactionPayment__PaymentRequestResponse:
    displayName: PaymentAck
    type: !include schemas/TPaymentAck.raml
  Transaction__TransactionPayment__PaymentDelete:
    displayName: PaymentAck
    type: !include schemas/TPaymentAckDelete.raml
  Account: !include schemas/Account.raml
  AccountPatch: !include schemas/AccountPatch.raml
  AccountCore: !include schemas/AccountCore.raml
  AccountCorePatch: !include schemas/AccountCorePatch.raml
  AccountSettings: !include schemas/AccountSettings.raml
  AccountSettingsCore: !include schemas/AccountSettingsCore.raml
  AccountBalance: !include schemas/AccountBalance.raml
  AccountRegisterRequest: !include schemas/AccountRegisterRequest.raml
  #Primitives
  Currency: !include schemas/primitives/Currency.raml
securedBy: AuthToken
/transactions:
  description: |
    This endpoint provides an option to work on a collection of transactions' objects. This includes retrieving a collection
    or creating a new object in the collection.

    All operations on this endpoint require authentication and work on authenticated account only.
  get:
    is: [ JSON200Envelope, JSON400Envelope, 401Response, ]
    description: |
        Reads all transactions that match given parameters and belong to the authenticated account.

        It is possible that an empty set will be returned if there are no transactions matching the search criteria.
        In that case **success** key in the *JSON envelope* will indicate if the operation succeeded.

        All parameters are optional.
    queryParameters:
      offset?: !include schemas/primitives/Offset.raml
      limit: !include schemas/primitives/Limit.raml
      order_by:
        description: |
          Field to sort the returned dataset on. Not all transaction types may support all order fields.
        default: completed
        required: false
        type: string
        example: created
        enum:
          - completed
          - created
      order:
        description: Direction to sort the returned dataset on - either ascending or descending.
        default: descending
        required: false
        type: string
        example: ascending
        enum:
          - ascending
          - descending
      before:
        description: |
          Shows only records created before this date/time.
          Uses ISO 8601 as a date/time format. Can be used in conjunction with ***after*** parameter.
        required: false
        type: datetime
        example: 2018-12-24T12:00:00Z
      after:
        description: |
          Shows only records created after this date/time.
          Uses ISO 8601 as a date/time format. Can be used in conjunction with ***before*** parameter.
        required: false
        type: datetime
        example: 2018-12-24T12:00:00Z
      type?: !include schemas/primitives/TransactionType.raml
      status:
        description: Shows only records in a given status. If this parameter is set then ***only_valid*** parameter is ignored, even if explicitly defined.
        required: false
        type: string
        enum:
          - initial
          - resolved
          - expired
          - aborted
          - failed
          - pending
          - deferred
        example: initial
      only_valid:
        type: boolean
        description: |
          By default only valid, non-expired transactions are returned. This includes ***initial***, ***resolved***, ***deferred*** and ***pending*** statuses.
          In order to get transactions in all statuses set this option to ***false***.
        required: false
        default: true
    responses:
      200:
        description: |
          This method always returns enveloped JSON with the returned dataset placed under the ***body*** key.

          If there were no results found, either because there were no transactions registered under the authenticated account or due to search parameters, an empty array will be returned.
        body:
          application/json:
            properties:
              body:
                description: Actual data returned by the method.
                minItems: 0
                required: true
                type: array
                items:
                  type: Transaction__All__Details
            example: !include examples/TransactionsGETResponse.json
      400:
        description: |
          This status code will be returned in case of any error encountered during retrieving transactions.
          Check ***messages*** to get more information about the reason behind this error and/or review your search parameters.
        body:
          application/json:
            example: !include examples/ErrorResponse.json
  post:
    is: [JSON201Envelope, JSON400Envelope, 401Response]
    description: |
      Creates a new transaction of a requested type. Currently, three types of transactions are available:
      - **Payment** (_payment_) - creates a payment request to be processed by the Merchant/Buyer in order to pay for an order created on Merchant's end,
      - **Blockchain Transfer** (_blockchain-transfer_) - transfers a requested currency (defined value) to a blockchain,
      - **Coin File Transfer** (_coin-file-transfer_) - exports a requested currency (defined value) to the Wallet-ready file.

      Each type of transaction's request has different parameters and responses. In order to define which type of transaction should be created ***type*** parameter has to be defined and set to the required value.

      For the Payment transaction, it is important to remember that the ***order_id*** is affecting how - and if - a new transaction will be created.
      Rules are as follow:
      - a new transaction with a given ***order_id*** cannot be created if a transaction with the same ***order_id*** already exists in the **resolved** status. It is to prevent the same order to be paid twice,
      - a new transaction with a given ***order_id*** cannot be created if a transaction with the same ***order_id*** already exists in the **pending** or **deferred** status. It is to prevent the same order to be paid again while the payment for it is already being processed,
      - if a transaction with a given ***order_id*** already exists and is in the **initial** status a new transaction will be created and the old one will be automatically aborted,
      - if a transaction with a given ***order_id*** does not exist or it is in either **aborted**, **failed** or **expired** status a new transaction will be created.
    body:
      application/json:
        description: |
          Depending on the type of transaction different payload is required to initialize a new transaction. Check description below and examples for detailed information.
        type: Transaction__All__CreateRequest
    responses:
      201:
        body:
          application/json:
            examples:
              payment:
                displayName: Payment Transaction Create Response
                value: !include examples/TransactionsPOSTResponse.json
            properties:
              body:
                minItems: 0
                required: true
                type: array
                items:
                  type: Transaction__All__CreateRequestResponses
      400:
        description: |
          This status code will be returned in case of any error encountered during transaction creation.
          Check ***messages*** to get more information about the reason behind this error and/or review your input data.
        body:
          application/json:
            example: !include examples/ErrorResponse.json
/transaction:
  description: |
    This endpoint operates on a single transaction's object specified by the ***transaction_id*** passed in the URL.
  /{transaction_id}:
    get:
      is: [ JSON200Envelope, JSON400Envelope, 401Response ]
      description: |
        Returns information about transaction specified by the ***transaction_id***.
        Depending on the type of the requested transaction returned dataset may differ.
        Only transactions belonging to the authenticated account can be retrieved.
      responses:
        200:
         body:
          application/json:
            properties:
              body:
                minItems: 0
                required: true
                type: array
                items:
                  type: Transaction__All__Details
            example: !include examples/TransactionsGetResponse.json
        400:
          description: |
            This status code will be returned in case of any error encountered during retrieving transactions.
            Check ***messages*** to get more information about the reason behind this error and/or review your search parameters.
          body:
            application/json:
              example: !include examples/ErrorResponse.json
    /payment:
      post:
        securedBy:
        description: |
          This endpoint works only for **payment** transaction's type.
          As this endpoint is supposed to be called by the Buyer it is not requiring authentication of any sort.

          It accepts **Payment** object with data needed to complete the transaction, including _Coins_. Data provided in this request is sent to the Issuer and saved in the original payment transaction object for reference.

          This is the only endpoint that is not returning enveloped JSON but the **PaymentAck** object as specified in Payment specification.
        body:
          application/json:
            example: !include examples/TransactionPaymentPOSTRequest.json
            type: Transaction__TransactionPayment__PaymentRequest
        responses:
          200:
            body:
              application/json:
                example: !include examples/TransactionPaymentPOSTResponse.json
                type: Transaction__TransactionPayment__PaymentRequestResponse
      delete:
        securedBy:
        description: |
          This endpoint works only for **payment** transaction's type.
          As this endpoint is supposed to be called by the Buyer it is not requiring authentication of any sort.

          It cancels the transaction payment process if it has not yet reached any of it's final states.

          This is the only endpoint that is not returning enveloped JSON but the **PaymentAck** object as specified in Payment specification.
          If the transaction is successfully aborted the **PaymentAck** object with ***status*** = **failed** will be returned.
        responses:
          200:
            body:
              application/json:
                type: Transaction__TransactionPayment__PaymentDelete
                example: !include examples/TransactionPaymentDELETEResponse.json
/order:
  description: |
    This endpoint operates on a single Payment transaction object specified by the ***order_id*** passed in the URL.
  /{order_id}:
    get:
      is: [ JSON200Envelope, JSON400Envelope, 401Response ]
      description: |
        Returns information about transaction specified by the ***order_id***.
        Only transactions belonging to the authenticated account can be retrieved.

        It is an alias for */transaction/{transaction_id}* endpoint but using ***order_id*** instead of ***transaction_id***.
      responses:
        200:
         body:
          application/json:
            properties:
              body:
                required: true
                type: array
                items:
                  type: Transaction__TransactionPayment__Details
            example: !include examples/TransactionsGetResponse.json
        400:
          description: |
            This status code will be returned in case of any error encountered during retrieving transactions.
            Check ***messages*** to get more information about the reason behind this error and/or review your search parameters.
          body:
            application/json:
              example: !include examples/ErrorResponse.json
/accounts:
  description: |
    This endpoint provides an option to work on a collection of accounts' objects.
  post:
    description: |
      Provides a way to create a new Merchant's account on the Gateway.
      The account will be created with the default configuration inherited from the Gateway. It's advisable to set required settings after the account is created using _/account/settings_ endpoint.

      By default, these settings will be copied over to the account from the Gateway and any changes in the Gateway's default configuration won't affect them.
      It's up to the Merchant to make sure that these setting are valid and up to date as the Gateway operator will not be able to update them:
      - ***home_issuer***
      - ***default_payment_timeout***
      - ***default_payment_currency***

      In case ***email_customer_contact*** is being set then values of ***provide_receipt_via_email*** and ***provide_refund_via_email*** from Gateway's configuration are also copied over.

      It is extremelly important to remember to save and store in a secure way:
      - ***auth_token***
      - ***admin_auth_token***
      - ***private_key***

      **Account creation is the only moment where this keys are accessible!**
      Both ***admin_auth_token*** and ***private_key*** are not storred on the Gateway in any way, meaning there is no way to recover them once lost!
    is: [JSON201Envelope, JSON400Envelope]
    securedBy:
    body:
      application/json:
        type: AccountCore
        example: !include examples/AccountsPOSTRequest.json
    responses:
      201:
        body:
          application/json:
            properties:
              body:
                minItems: 0
                required: true
                type: array
                items:
                  type: Account
            example: !include examples/AccountsPOSTResponse.json
      400:
        description: |
          This status code will be returned in case of any error encountered during account creation.
          Check ***messages*** to get more information about the reason behind this error and/or review your request's parameters.

/account:
  description: |
    This endpoint provides an option to work on authenticated account object hence it requires a valid authentication token to be provided for every operation.
  get:
    is: [JSON200Envelope, JSON400Envelope, 401Response]
    description: |
      Returns current account's data, together with its settings.
    responses:
      200:
        body:
          application/json:
            properties:
              body:
                minItems: 1
                required: true
                type: array
                items:
                  type: Account
            example: !include examples/AccountsPOSTResponse.json
      400:
        description: |
          This status code will be returned in case of any error encountered during retrieving the account.
          Check ***messages*** to get more information about the reason behind this error.
  patch:
    is: [JSON200Envelope, JSON400Envelope, 401Response]
    description: |
      Set one or more new configuration settings for this account.

      This endpoint has only an access to the main fields of the account. In order to modify account's settings use */account/settings* endpoint.
    body:
      application/json:
        type: AccountCorePatch
        properties:
          domain?: !include schemas/primitives/Domain.raml
        minProperties: 1
    responses:
      200:
        body:
          application/json:
            properties:
              body:
                minItems: 1
                required: true
                type: array
                items:
                  type: AccountPatch
            example: !include examples/AccountsPATCHResponse.json
      400:
        description: |
          This status code will be returned in case of any error encountered during saving account's changes.
          Check ***messages*** to get more information about the reason behind this error and/or review your request's parameters.
  /settings:
    get:
      is: [JSON200Envelope, JSON400Envelope, 401Response]
      description: |
        Returns current settings for the account. Returned values are either directly set by the Merchant or retrieved from the default Gateway's configuration.
      responses:
        200:
          body:
            application/json:
              properties:
                body:
                  minItems: 0
                  required: true
                  type: array
                  items:
                    type: AccountSettings
              example: !include examples/AccountSettingsGetResponse.json
        400:
          description: |
            This status code will be returned in case of any error encountered during retrieving settings.
            Check ***messages*** to get more information about the reason behind this error.
    patch:
      is: [JSON200Envelope, JSON400Envelope, 401Response]
      description: |
        Set new values for the Merchant's account settings provided in the requests.

        The Gateway operator may decide to set some of the settings as read-only hence it will be impossible to modify them.
        Settings are being saved in a transaction, meaning if even one key will be invalid - the whole operation will fail.
      body:
        application/json:
          type: AccountSettingsCore
          minProperties: 1
          example: !include examples/AccountSettingsPATCHRequest.json
      responses:
        200:
          body:
            application/json:
              properties:
                body:
                  description: Actual data returned by the method.
                  minItems: 0
                  required: true
                  type: array
                  items:
                    type: AccountSettings
              example: !include examples/AccountSettingsPatchResponse.json
        400:
          description: |
            This status code will be returned in case of any error encountered during saving new settings.
            Check ***messages*** to get more information about the reason behind this error and/or review your request's parameters.
  /balance:
    get:
      is: [JSON200Envelope, JSON400Envelope, 401Response]
      description: |
        Returns a list of currency balances either for all currencies stored on the Merchant's account or all if the currency is not defined.
      queryParameters:
        currency:
          type: Currency
          required: false
          description: The currency identifier that the balance should be returned for.
      responses:
        200:
          body:
            application/json:
              properties:
                body:
                  description: Actual data returned by the method.
                  minItems: 0
                  required: true
                  type: array
                  items:
                    type: AccountBalance
              examples:
                set-currency: !include examples/AccountBalanceResponseSingleCurrency.json
                all-currencies: !include examples/AccountBalanceResponceAllCurrencies.json
        400:
          description: |
            This status code will be returned in case of any error encountered during retrieving settings.
            Check ***messages*** to get more information about the reason behind this error.
